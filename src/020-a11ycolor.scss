/// The function to find the nearest accessible color
///
/// @param  {Color}           $toMakeA11y            The color that is to be changed
/// @param  {Color}           $background            The background color to for the contrast
/// @param  {'small'|'large'} $ratioKey   ['small']  The keyword 'small' or 'large' to set the WCAG 2.1 contrast ration or 3.0 or 4.5
///                                                  the rougher the found color.
///
/// @example scss
/// 	color: AU-a11ycolor( red, blue );                  // returns: #ffa3a3
/// 	color: AU-a11ycolor( red, blue, large );           // returns: #ff6666
/// 	color: AU-a11ycolor( #c0c0c0, #c0c0c0, small, 1 ); // returns: #4d4d4d
///
///
/// @group Main
///
/// @access public
@function AU-a11ycolor( $toMakeA11y, $background, $ratioKey: 'small' ) {
	@if type-of( $toMakeA11y ) != 'color' {
		@error "Where we’re going, we don’t need roads; the AU-a11ycolor function only takes a color as the first attribute!";
	}

	@if type-of( $background ) != 'color' {
		@error "You shall not pass; the AU-a11ycolor function only takes a color as the second attribute!";
	}

	@if $ratioKey != 'small' and $ratioKey != 'large' {
		@error "I have always depended on the kindness of strangers; the AU-a11ycolor function only takes 'small' or 'large' as third attribute.";
	}


	$ratios: (
		'large': 3,
		'small': 4.5,
	);
	$ratio: map-get( $ratios, $ratioKey );

	// Check the ratio straight away, if it passes return the value as hex
	@if AU-color-contrast( $toMakeA11y, $background ) >= $ratio {
		@return $toMakeA11y;
	}

	// Ratio didn't pass so we need to find the nearest color
	$a11yLightness: lightness( $toMakeA11y );
	$bgLightness: lightness( $background );
	$minHexDiff: 0.39215686274;
	$minLightness: 0;
	$maxLightness: 100;

	// If our colour passes contrast on black
	@if AU-color-contrast( hsl(
		hue( $toMakeA11y ),
		saturation( $toMakeA11y ),
		$bgLightness
	), $background ) >= $ratio {
		$minLightness: $a11yLightness;
		$maxLightness: $bgLightness;
	}
	@else if AU-color-contrast( #000, $background ) >= $ratio {
		$maxLightness: if( $a11yLightness > $bgLightness, $bgLightness, $a11yLightness );
	}
	// It didn't pass on black
	@else {
		$minLightness: if( $a11yLightness > $bgLightness, $a11yLightness, $bgLightness );
	}

	$direction: $minLightness != 0;
	$foundColor: '';

	// Binary search until we find the colour that meets contrast
	@while( $foundColor == '' ) {
		$midLightness: ( $minLightness + $maxLightness ) / 2;
		$midColor: hsl(
			hue( $toMakeA11y ),
			saturation( $toMakeA11y ),
			$midLightness
		);
		$resetColor: mix( $midColor, $midColor );


		// If we meet contrast
		@if AU-color-contrast( $resetColor, $background ) >= $ratio {
			// The colour is in the minimal lightness range for one hexadecimal
			@if	$maxLightness - $minLightness < $minHexDiff {
				$foundColor: $resetColor;
			}

			@if $direction {
				$maxLightness: $midLightness;
			}
			@else {
				$minLightness: $midLightness;
			}
		}
		// We don't meet contrast
		@else if( $direction ) {
			$minLightness: $midLightness;
		}
		@else {
			$maxLightness: $midLightness;
		}
	}

	@return $foundColor;
}
